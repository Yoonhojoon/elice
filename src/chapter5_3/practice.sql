
-- ------------------------------------------------------------------------------
-- [실습1] 데이터 조회하기 - SELECT
-- ------------------------------------------------------------------------------

-- book 테이블의 구조를 조회하는 쿼리입니다. 수정하실 필요는 없습니다.
DESC book;

-- 책의 제목과 저자만 골라서 조회하는 쿼리를 작성해주세요.
SELECT title, author from book;

-- ------------------------------------------------------------------------------
-- [실습2] SELECT에 조건 추가하기 - WHERE
-- ------------------------------------------------------------------------------

-- gender가 'M'인 직원만 골라서
-- 조회하는 쿼리를 작성해주세요.

SELECT *
FROM employees
WHERE gender = "M";



-- ------------------------------------------------------------------------------
-- [실습3] 여러 개의 조건 추가하기 - WHERE
-- ------------------------------------------------------------------------------

DESC score;

-- 수학 점수가 80점 초과, 국어 점수가 90점 이상인 학생의 정보를 검색해보세요.

SELECT *
FROM score WHERE math > 80 and korean >= 90;



-- ------------------------------------------------------------------------------
-- [실습4] 신체 검사표
-- ------------------------------------------------------------------------------

-- 아래에 미션을 수행하는 코드를 작성해 봅시다.

SELECT name from student;

SELECT * FROM student
WHERE gender = "M";

SELECT height FROM student
WHERE height <= 170;

SELECT weight FROM student
WHERE weight >= 50;

-- ------------------------------------------------------------------------------
-- [실습5] 주주총회
-- ------------------------------------------------------------------------------

-- 아래에 미션을 수행하는 코드를 작성해 봅시다.

-- 모든 주주의 정보
SELECT *
FROM shareholder;




-- 10만주 이상 가지고 있는 주주 정보
SELECT *
FROM shareholder
WHERE stock >= 100000;




-- Alexis, Craig, Fred가 가진 주식 수를 출력하세요.
SELECT stock
FROM shareholder
WHERE
    name in ("Alexis", "Craig", "Fred");




-- 엘리스에게 찬성하면서 10만 주 이상 보유 중인 주주들의 이름과 주식 수를 출력
SELECT name,stock
FROM shareholder
WHERE
    agree = 0 and
    stock >= 100000;



--엘리스에게 반대하면서 10만 주 이상 보유 중인 주주들의 이름과 주식 수를 출력
SELECT
    name
    ,stock
FROM shareholder
WHERE
    agree = 1 and
    stock >= 100000;




--20만 주 이상 또는 10만 주 이하만큼 보유하고 있는 주주들의 정보를 출력하세요.
SELECT *
FROM shareholder
WHERE
    stock <= 100000 or
    stock >= 200000;

-- ------------------------------------------------------------------------------
-- [실습6] 와일드 카드를 사용한 검색 - LIKE, WILDCARDS 1
-- ------------------------------------------------------------------------------

-- 책들의 정보가 담겨있는 테이블의 구조를 조회합니다. 수정하실 필요는 없습니다.
DESC book;

-- 아래에 제목이 The Little로 시작하는 책만 조회하는 쿼리를 작성해주세요.
select * from book where title like 'The Little%';

-- 아래에 제목에 and가 포함된 책만 조회하는 쿼리를 작성해주세요.
select * from book where title like '%and%';

-- 아래에 제목이 Rings로 끝나는 책만 조회하는 쿼리를 작성해주세요.
select * from book where title like '%Rings';



-- ------------------------------------------------------------------------------
-- [실습7] 새로운 데이터 삽입하기
-- ------------------------------------------------------------------------------

-- INSERT문을 이용해 쿼리를 작성해 보세요.
INSERT INTO employees VALUES(10001, '1953-09-02', 'Georgi', 'Facello', 'M', '1986-06-26', NULL);

-- 값을 잘 넣었는지 확인하는 코드입니다. 수정하지마세요!
SELECT * FROM employees;

-- ------------------------------------------------------------------------------
-- [실습8] 데이터 수정하기
-- ------------------------------------------------------------------------------

-- UPDATE문을 이용해 쿼리를 작성해 보세요.
UPDATE employees
    set birth_date = '1953-09-01'
WHERE emp_no = 10001;

-- 값을 잘 수정했는지 확인하는 코드입니다. 수정하지마세요!
SELECT * FROM employees;

-- ------------------------------------------------------------------------------
-- [실습9] 데이터 삭제하기
-- ------------------------------------------------------------------------------

-- DELETE문을 이용해 쿼리를 작성해 보세요.
DELETE
FROM employees
WHERE emp_no = 10005;

-- 값을 잘 삭제했는지 확인하는 코드입니다. 수정하지마세요!
SELECT * FROM employees;

-- ------------------------------------------------------------------------------
-- [실습10] 가게 DB 구축하기
-- ------------------------------------------------------------------------------

-- 아래에 문제 설명대로 정보를 추가해 봅시다.
insert into product values(1, 'carrot', 100, '2019-04-10', 1000, 900);
insert into product values(2, 'tea', 1000, '2020-02-10', 1000, 900);
insert into product values(3, 'clock', 100, null, 200000, 180000);

-- product테이블 전체를 조회해 봅시다.
select * from product;

-- ------------------------------------------------------------------------------
-- [실습11] 가게 DB 분석하기
-- ------------------------------------------------------------------------------


-- 아래에 미션을 수행하는 쿼리를 작성해 보세요.
select count(*) from product;
select sum(stock) from product;
select max(selling_price) from product;

-- ------------------------------------------------------------------------------
-- [실습12] 서적
-- ------------------------------------------------------------------------------

with filtered_books as (
    select
        price
    from
        books
    where
        publication_year >= 2001
        and publication_year <= 2003
)

select
    max(price) as max_price,
    min(price) as min_price
from
    filtered_books;
